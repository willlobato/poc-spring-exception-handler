/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.module.jsonSchema.JsonSchema;
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator;
import net.pupunha.servicehandler.server.CustomObjectMapper;
import net.pupunha.servicehandler.server.FieldValidation;
import net.pupunha.servicehandler.server.ServiceErrorMessage;
import net.pupunha.servicehandler.server.ValidationErrorMessage;
import org.junit.Test;
import org.springframework.http.HttpStatus;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.Map;

import static org.junit.Assert.assertNotNull;

public class AppTest {

    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test
    public void testConvertServiceErrorMessage() throws IOException {
        CustomObjectMapper objectMapper = new CustomObjectMapper();

        ServiceErrorMessage message = ServiceErrorMessage.builder()
                .moduleId("MONEY-IN-OUT")
                .status(HttpStatus.BAD_REQUEST)
                .errorCode("AccountAlreadyExists")
                .message("The specified account already exists.")
                .path("/xpt/sadasd")
                .cause(Collections.singletonList(ServiceErrorMessage.builder().moduleId("ODM").build()))
                .build();

        String json = objectMapper.writeValueAsString(message);
        System.out.println(json);

        Map o = objectMapper.readValue(json, new TypeReference<Map>() {});
        System.out.println(o);
    }

    @Test
    public void testConvertServiceErrorMessageWithValidation() throws IOException {
        CustomObjectMapper objectMapper = new CustomObjectMapper();

        ServiceErrorMessage message = ServiceErrorMessage.builder()
                .moduleId("MONEY-IN-OUT")
                .status(HttpStatus.BAD_REQUEST)
                .errorCode("ValidationError")
                .message("Validation errors")
                .path("/xpt/save/1221")
                .cause(Collections.singletonList(
                        ValidationErrorMessage.builder()
                                .fields(Collections.singletonList(FieldValidation.builder()
                                        .field("mass")
                                        .rejectedValue(new BigDecimal("99999.99"))
                                        .build()))
                                .message("must be less or equal to 104000")
                                .build()))
                .build();

        String json = objectMapper.writeValueAsString(message);
        System.out.println(json);

        ServiceErrorMessage o = objectMapper.readValue(json, new TypeReference<ServiceErrorMessage>() {});
        System.out.println(o);
    }

    @Test
    public void testConvertServiceErrorJsonSchema() throws IOException {
        CustomObjectMapper objectMapper = new CustomObjectMapper();

        ServiceErrorMessage message = ServiceErrorMessage.builder()
                .moduleId("MONEY-IN-OUT")
                .status(HttpStatus.CONFLICT)
                .errorCode("ValidationError")
                .message("Validation errors")
                .path("/xpt/save/1221")
                .cause(Collections.singletonList(
                        ValidationErrorMessage.builder()
                                .fields(Collections.singletonList(FieldValidation.builder()
                                        .field("mass")
                                        .rejectedValue(new BigDecimal("99999.99"))
                                        .build()))
                                .message("must be less or equal to 104000")
                                .build()))
                .build();

        String json = objectMapper.writeValueAsString(message);

        System.out.println(json);

        JsonSchemaGenerator schemaGen = new JsonSchemaGenerator(objectMapper);
        JsonSchema schema = schemaGen.generateSchema(ServiceErrorMessage.class);

        System.out.println(objectMapper.writeValueAsString(schema));


        ServiceErrorMessage o = objectMapper.readValue(json, new TypeReference<ServiceErrorMessage>() {});
        System.out.println(o);
    }

}
